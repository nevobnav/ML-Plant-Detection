#!/usr/bin/python2.7

"""
This script contains classes which store detection settings for
various different crops and model architectures.
"""

class DetectionSettings(object):
	"""Base detection settings class.

	A child should implement the method parameters(), in which all
	necessary model parameters are stored. To use custom settings, the base
	class can also be used by passing the mandatory parameters to the 
	constructor as keyword arguments. Mandatory parameters are:
	* box_size : int
		Size of the bounding boxes in terms of RGB-pixels. Its value
		depends on the size of the crops. For broccoli, good default
		values are 50 or 55. For lettuce, we recommend smaller boxes
		such that there is less overlap; use 40 or 45.
	* block_size : int
		Size of the blocks in which the RGB tif is divided, in terms
		of RGB-pixels. The bigger the blocks, the more data is loaded
		in memory at once. For testing purposes, we recommend a value
		of 500. On a GPU implementation, higher values like 2000 or
		3000 can be used.
	* block_overlap : int
		Width of the overlap region between two adjacent blocks. Keep
		at 3*box_size.
	* overlap_threshold : float (in [0,1])
		Minimum intersection over union (IoU) overlap between two
		boxes in order for non-max-suppression to trigger. For
		broccoli detection, a good default setting is 0.4. If crops
		are closer together, the value must be increased. In general
		values of 0.6, 0.7 work well.
	* crop_size_threshold : float (in [0,1])
		Minimum percentage of bounding box that should be filled
		with crop mask. If this percentage is lower, the crop will
		be discarded. A good default value is 0.1. Higher value means
		more crops are discarded.
	* centroid_distance : int
		Minimum distance in RGB pixels between two centroids of
		duplicate crops. If their distance is smaller, one of the crops
		will be removed. For broccoli, a good default value is half
		the box_size.
	* sigma : float (>0)
		Smoothing parameter in the region proposal step. Lower means
		more candidate bounding boxes are detected. For broccoli, good
		values are in the interval [3,6]. For lettuce we recommend
		slightly lower values.
	* model_path : str (path object)
		Path to folder which contains the network files. The folder should
		contain the files NETWORK.h5, STRUCTURE.json and WEIGHTS.h5, as
		generated by the save method of the class NetworkTrainer in
		network.py.
	These parameters can be accessed as attributes of an instance. 

	Methods
	-------
	parameters()
		Function that initializes (some of) the mandatory parameters. Should
		return a dict containing them.
	
	Raises
	------
	NotImplementedError : if one of the mandatory parameters is not defined.
	"""

	def __init__(self, **kwargs):
		"""An attribute can be altered by adding it as a keyword argument
		to the constructor."""
		self.mandatory_parameters = {
			'box_size',
			'block_size',
			'block_overlap',
			'overlap_threshold',
			'crop_size_threshold',
			'centroid_distance',
			'sigma',
			'model_path',
		}
		self.__dict__.update((key, val) for key, val in kwargs.items())
		
		predefined_parameters = self.parameters()
		for param_name in predefined_parameters:
			if param_name not in self.__dict__:
				self.__dict__.update([(param_name, predefined_parameters[param_name])])

		for param_name in self.mandatory_parameters:
			if param_name not in self.__dict__:
				raise NotImplementedError('Attribute "{}"" is not defined'.format(param_name))

	def __str__(self):
		s= 'Settings{\n'+' '*4
		for key in self.__dict__:
			if key != 'mandatory_parameters':
				s+='{:<20} : {:<20}\n'.format(key, self.__dict__[key])+' '*4
		s = s[:-4]+'}'
		return s

	def parameters(self):
		"""Returns a dictionary with predefined parameters.

		Should be implemented in a the child class."""

		return dict()


class BroccoliSettings(DetectionSettings):
	"""Settings to use for detecting broccoli crops."""

	def parameters(self):
		return {'overlap_threshold' : 0.4,
				'crop_size_threshold' : 0.1,
				'centroid_distance' : 25,
				'box_size' : 55,
				'sigma' : 5,
				'model_path' : './Networks/Broccoli 18-11-19',
				'block_size' : 1000,
				'block_overlap' : 165 }


class LettuceSettings(DetectionSettings):
	"""Settings to use for detecting lettuce crops."""

	def parameters(self):
		return {'overlap_threshold' : 0.6,
				'crop_size_threshold' : 0.1,
				'centroid_distance' : 15,
				'box_size' : 45,
				'sigma' : 3.5,
				# 'model_path' : './Networks/Lettuce 26-11-19',
				'block_size' : 1000,
				'block_overlap' : 135 }
